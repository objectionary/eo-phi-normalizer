# The MIT License (MIT)
#
# Copyright (c) 2016-2024 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

eo: eo-runtime/src/test/eo/org/eolang-original/runtime-tests.eo
meta: |-
  +alias org.eolang.io.stdout
  +architect yegor256@gmail.com
  +home https://github.com/objectionary/eo
  +tests
  +package org.eolang
  +version 0.0.0
programs:
- name: understands-this-correctly
  text: |
    [] > understands-this-correctly
      # Abstract a.
      [x] > a
        $.x > @
      eq. > @
        a 42
        42
- name: takes-parent-object
  text: |
    [] > takes-parent-object
      # Abstract a.
      [x] > a
        # Take.
        [] > take
          ^.x > @
        take > @
      eq. > @
        a 42
        42
- name: makes-object-a-constant
  text: |
    [] > makes-object-a-constant
      # Foo.
      [] > foo
        times. > @
          50
          50
      foo.@ > f!
      eq. > @
        f
        f
- name: kids-are-accessible-in-const-object
  text: |
    [] > kids-are-accessible-in-const-object
      # Test.
      [] > a
        # Hello.
        [] > hello
          42 > @
      a > b!
      eq. > @
        b.hello
        42
- name: takes-parent-through-attribute
  text: |
    [] > takes-parent-through-attribute
      42 > x
      $ > this
      # Phi1.
      [] > @
        # Phi2.
        [] > @
          # Phi3.
          [] > @
            eq. > @
              this.x
              42
- name: throws-when-applies-to-closed-object
  text: |
    [] > throws-when-applies-to-closed-object
      # A.
      [x] > a
        x > @
      a FALSE > closed
      closed TRUE > @
- name: makes-deep-object-recursively
  text: |
    [] > makes-deep-object-recursively
      eq. > @
        x 5
        0
      # X.
      [i] > x
        if. > @
          i.lt 0
          0
          x
            i.minus 1
- name: iterates-over-sigma
  text: |
    [] > iterates-over-sigma
      memory 0 > x
      eq. > @
        seq
          *
            x.write TRUE
            eq.
              TRUE
              x.as-bool.while
                [i]
                  &.x.write FALSE > @
        FALSE
- name: calculates-only-once-BROKEN
  text: |
    [] > calculates-only-once-BROKEN
      memory 0 > x
      # A.
      [] > a
        seq > @
          *
            x.write (x.as-int.plus 1)
            42
      eq. > @
        seq
          *
            x.write 0
            a.neg.neg.neg.neg.eq 42
            x
        1
- name: rho-of-add-should-not-change
  text: |
    [] > rho-of-add-should-not-change
      memory 0 > f1
      cage 0 > f2
      memory 0 > f0
      nop > @
        seq
          *
            f0.write 0
            f1.write 1
            f2.write (f0.plus f1)
            f1.write f2
            TRUE
- name: positive-object-vertices
  text: |
    [] > positive-object-vertices
      eq. > @
        or.
          or.
            42.<.eq 42.<
            "Hello".<.eq "Hello".<
          45-1F-E7.<.eq 45-1F-E7.<
        FALSE
- name: take-vertex-as-vertical-attribute
  text: |
    [] > take-vertex-as-vertical-attribute
      not. > @
        eq.
          <.
            42
          42.<
- name: negative-object-vertices
  text: |
    [] > negative-object-vertices
      # A.
      [x] > a
      eq. > @
        or.
          or.
            or.
              or.
                (2.plus 3).<.eq 5.<
                42.<.eq 42.0.<
              45-1F-E8.<.eq 45-1F-E8-83.<
            (a 5).<.eq (a 5).<
          (* 1 2 3).<.eq (* 1 2 3).<
        FALSE
- name: recursion-without-arguments
  text: |
    [] > recursion-without-arguments
      memory 0 > n
      # Func.
      [] > func
        if. > @
          n.as-int.gt 0
          seq
            *
              n.write (n.as-int.minus 1)
              ^.func
              TRUE
          TRUE
      eq. > @
        seq
          *
            n.write 4
            func
        TRUE
- name: returns-same-object
  text: |
    [] > returns-same-object
      # Foo.
      [] > foo
        memory 0 > x
      eq. > @
        foo.x.<
        foo.x.<
- name: compiles-correctly-with-long-duplicate-names
  text: |
    [] > compiles-correctly-with-long-duplicate-names
      # Long object 1.
      [] > long-object-name
        # Long object 2.
        [] > long-object-name
          # Long object 3.
          [] > long-object-name
            # Long object 4.
            [] > long-object-name
              # Long object 5.
              [] > long-object-name
      TRUE > @
- name: refers-to-inner-vars-correctly
  text: |
    [] > refers-to-inner-vars-correctly
      memory 0 > go
      eq. > @
        seq
          *
            go.write TRUE
            go.as-bool.while
              [i]
                memory 0 > m
                seq > @
                  *
                    42 > x
                    m.write x
                    go.write FALSE
            TRUE
        TRUE
- name: named-inner-abstract-object
  text: |
    [] > named-inner-abstract-object
      seq > @
        *
          # A.
          [] > a
            TRUE > @
- name: calling-caged-function
  text: |
    [] > calling-caged-function
      cage 0 > h
      # Func.
      [x] > func
        2.plus x > @
      nop > @
        eq.
          seq
            *
              h.write func
              h.@ 8
          10
- name: app-that-calls-func
  text: |
    [] > app-that-calls-func
      # App.
      [] > app
        # App.f.
        [args] > f
          1 > a
          2 > @
        f > @
          * 1 2 3
      app > output
      eq. > @
        output
        2
- name: directly-accesses-objects-from-root
  text: |
    [] > directly-accesses-objects-from-root
      Q.org.eolang.memory 0 > m
      eq. > @
        seq
          *
            m.write 42
            Q.org.eolang.io.stdout
              "Hello, world!"
            m.write
              m.as-int.minus 2
        40
- name: directly-accesses-objects-from-standard-root
  text: |
    [] > directly-accesses-objects-from-standard-root
      QQ.memory 0 > m
      eq. > @
        seq
          *
            m.write 42
            QQ.io.stdout
              "Works fine!"
            m.write
              m.as-int.minus 2
        40
- name: standard-root-and-root
  text: |
    [] > standard-root-and-root
      QQ.io.stdout > stand-root
        "one"
      Q.org.eolang.io.stdout > root
        "one"
      eq. > @
        root
        stand-root
- name: extract-attribute-from-decoratee
  text: |
    [] > extract-attribute-from-decoratee
      # Return.
      [foo] > return
      # A.
      [] > a
        return > @
          plus.
            42
            1
      eq. > @
        a.foo
        43
- name: takes-object-id-from-abstract-empty
  text: |
    [] > takes-object-id-from-abstract-empty
      # Foo.
      [] > foo
        # Foo.y
        [] > y
      eq. > @
        foo.y.<
        foo.y.<
- name: compares-two-foreign-objects
  text: |
    [] > compares-two-foreign-objects
      stdout.< > vtx
      nop > @
        and.
          vtx.eq QQ.io.stdout.<
          vtx.eq Q.org.eolang.io.stdout.<
- name: compares-two-local-objects
  text: |
    [] > compares-two-local-objects
      not. > @
        eq.
          5.plus.<
          5.plus.<
- name: constant-defends-against-side-effects
  text: |
    [] > constant-defends-against-side-effects
      memory 7 > a
      # Increment.
      [x] > inc
        seq > @
          *
            x.write
              x.as-int.plus 1
            x.as-int
      inc a > n!
      eq. > @
        times.
          n
          n
        64
- name: makes-shallow-copy
  text: |
    [] > makes-shallow-copy
      # A.
      [] > a
        memory' > v
      # B.
      [] > b
        a > @
      b' > b1
      b' > b2
      seq > @
        *
          b1.v.write 0
          b2.v.write 1
          eq.
            b1.v
            1
- name: copy-object-with-dot
  text: |
    [] > copy-object-with-dot
      # Book.
      [] > book
        "qwerty" > title
      book.title' > copy-title
      eq. > @
        copy-title
        "qwerty"
- name: parent-in-vertical-notation
  text: |
    [] > parent-in-vertical-notation
      memory 5 > m
      # Value.
      [] > value
        # Phi.
        [] > @
          m. > @
            ^.
              ^
      eq. > @
        value
        5
- name: parent-in-horizontal-notation
  text: |
    [] > parent-in-horizontal-notation
      memory 5 > m
      # Value.
      [] > value
        # Phi.
        [] > @
          ^.^.m > @
      eq. > @
        value
        5
- name: phi-in-vertical-notation
  text: |
    [] > phi-in-vertical-notation
      # Value.
      [] > value
        # Phi.
        [] > @
          100 > @
      eq. > @
        @.
          value
        100
- name: phi-in-horizontal-notation
  text: |
    [] > phi-in-horizontal-notation
      # Value.
      [] > value
        # Phi.
        [] > @
          100 > @
      eq. > @
        value.@
        100
- name: moves-copy-to-new-parent
  text: |
    [] > moves-copy-to-new-parent
      eq. > @
        # App.
        [] > app
          # App.phi.
          [] > @
            42 > x
            foo > @
              $:^
              24:h
          # Foo.
          [h] > foo
            plus. > @
              h
              ^.x
        66
- name: right-way-to-use-hierarchy
  text: |
    [] > right-way-to-use-hierarchy
      # Bool mock
      [value] > pybool
        value > @
      # Integer mock.
      [value] > pyint
        # Equal.
        [x] > eq
          pybool (value.eq x.value) > @
        # Add.
        [x] > add
          ^.^.pyint (value.plus x.value) > @
      ((pyint 1).add (pyint 3)).eq (pyint 4) > @
- name: check-triple-quotes
  text: "[] > check-triple-quotes\n  eq. > @\n    \"\"\"\n    Hello\n    \n    Hello\n
    \   \"\"\"\n    \"Hello\\n\\nHello\"\n"
- name: correctly-handles-same-name-attrs-simplified
  text: |
    [] > correctly-handles-same-name-attrs-simplified
      # Calculate.
      [first second] > calc
        plus. > @
          first
          second
      eq. > @
        calc
          []
            build 1 > @
            # Build first.
            [x] > build
              x > @
          []
            build 2 > @
            # Build second.
            [y] > build
              y > @
        3
- name: correctly-handles-same-name-attrs
  text: |-
    [] > correctly-handles-same-name-attrs
      # Calculate.
      [f s] > calc
        plus. > @
          f.next
          s.next
      eq. > @
        calc
          []
            # Build first.
            [x] > build
              x.plus 1 > @
              build > next
                plus.
                  x
                  1
            build 1 > @
          []
            # Build second.
            [y] > build
              y.plus 2 > @
              build > next
                plus.
                  y
                  2
            build 2 > @
        9
